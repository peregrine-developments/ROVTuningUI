/* autogenerated by Processing revision 1280 on 2022-06-06 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.awt.Frame;
import java.awt.BorderLayout;
import javax.swing.JOptionPane;
import controlP5.*;
import processing.serial.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class AUVCalStateLAGUI extends PApplet {







// Screen dimensions
final int screenWidth = 1600;
final int screenHeight = 900;

// Color palette
final int foregroundColor = color(255, 255, 255);
final int gaugeColor = color(0, 200, 20);
final int backgroundColor = color(10, 20, 30);
final int controlBackgroundColor = color(20, 30, 40);

CColor redButtonColor = new CColor();
CColor greenButtonColor = new CColor();

// Image objects
PImage logo;
PImage sub;

// Fonts
PFont titleFont;
PFont sectionFont;
PFont itemFont;

ControlFont smallControlFont;
ControlFont largeControlFont;

// Telemetry values
float yaw;
float pitch;
float roll;

float depth;

int thrustFL = 1200;
int thrustFR = 1400;
int thrustML = 1900;
int thrustMR = 1500;
int thrustRL = 1500;
int thrustRR = 1500;

// ControlP5 objects
ControlP5 cp5;

Accordion gains;

Slider yawP;
Slider yawI;
Slider yawD;
Toggle yawEnabled;

Slider pitchP;
Slider pitchI;
Slider pitchD;
Toggle pitchEnabled;

Slider rollP;
Slider rollI;
Slider rollD;
Toggle rollEnabled;

Slider depthP;
Slider depthI;
Slider depthD;
Toggle depthEnabled;

Slider2D pitchRollSetpoint;
Slider yawSetpoint;
Slider depthSetpoint;

// Storage objects
float storedYawP;
float storedYawI;
float storedYawD;

float storedPitchP;
float storedPitchI;
float storedPitchD;

float storedRollP;
float storedRollI;
float storedRollD;

float storedDepthP;
float storedDepthI;
float storedDepthD;

// Graph objects
Graph yawGraph;
Graph pitchGraph;
Graph rollGraph;
Graph depthGraph;

// State objects
boolean armed = false;

// Serial objects
String COMt = "N/A";
String COMx = "N/A";
Serial port;
boolean connected = false;

 public void serialSelect()
{
  COMt = COMx;
  if(port != null) port.stop();
  try {
    String[] prePorts = Serial.list();
    String[] finPorts = new String[] {};
    
    for(int i = 0; i < prePorts.length; i++)
    {
      if(match(prePorts[i], "/dev/ttyS") == null) // Don't include tty, might want to change this later
      {
        finPorts = append(finPorts, prePorts[i]);
      }
    }
    
    COMx = (String) JOptionPane.showInputDialog(null, 
    "Select COM port", 
    "Select port", 
    JOptionPane.QUESTION_MESSAGE, 
    null, 
    finPorts, 
    "Spoof");

    if (COMx == null || COMx.isEmpty()) COMx = COMt;
    
    // if(COMx != "N/A")
    // {
    //   port = new Serial(this, COMx, 115200); // change baud rate to your liking
    //   port.bufferUntil('\n'); // buffer until CR/LF appears, but not required..
    // }
    
    //nextUpdateMillis = millis();
  }
  catch (Exception e)
  {
    JOptionPane.showMessageDialog(null, "COM port " + COMx + " is not available (maybe in use by another program)");
    COMx = "N/A";
  }
}

 public void connect()
{
  if(COMx != "N/A")
  {
    try
    {
      port = new Serial(this, COMx, 115200); // change baud rate to your liking
      port.bufferUntil('\n'); // buffer until CR/LF appears, but not required..
      connected = true;
    }
    catch (Exception e)
    {
      JOptionPane.showMessageDialog(null, "COM port " + COMx + " is not available (maybe in use by another program)");
      COMx = "N/A";
    }
  }
  else
  {
    JOptionPane.showMessageDialog(null, "No COM port selected");
  }
}

 public void disconnect()
{
  if(!connected)
  {
    JOptionPane.showMessageDialog(null, "Not connected to a COM port");
  }
  else
  {
    port.stop();
    connected = false;
  }
}

 public void setup()
{
  logo = loadImage("./img/logo.png");
  //sub = loadImage("./img/sub.png");
  sub = loadImage("./img/sub_real.png");
  
  titleFont = loadFont("./fonts/CascadiaCode60.vlw");
  sectionFont = loadFont("./fonts/CascadiaCode20.vlw");
  itemFont = loadFont("./fonts/CascadiaCode12.vlw");

  //smallControlFont = new ControlFont();
  largeControlFont = new ControlFont(itemFont);
  
  surface.setTitle("AUVCalStateLA Tuning GUI");
  surface.setResizable(false);
  surface.setLocation(50, 50);

  redButtonColor.setActive(color(255, 0, 0));
  redButtonColor.setForeground(color(224, 0, 0));
  redButtonColor.setBackground(color(164, 0, 0));

  greenButtonColor.setActive(color(0, 255, 0));
  greenButtonColor.setForeground(color(0, 224, 0));
  greenButtonColor.setBackground(color(0, 164, 0));
  
  gui();
}

 public void settings()
{
  smooth(2);
  size(screenWidth, screenHeight);
}

 public void gui()
{
  cp5 = new ControlP5(this);
              
  // Yaw controller
  Group yawGains = cp5.addGroup("yawGains")
                      .setBackgroundColor(controlBackgroundColor)
                      .setBackgroundHeight(160)
                      .setLabel("Yaw");
                      
  yawP = cp5.addSlider("yawP")
            .setBroadcast(false)
            .setPosition(10, 10)
            .setSize(170, 20)
            .setRange(0, 100)
            .setValue(0)
            .setLabel("P")
            .moveTo(yawGains);
              
  yawI = cp5.addSlider("yawI")
            .setBroadcast(false)
            .setPosition(10, 30)
            .setSize(170, 20)
            .setRange(0, 100)
            .setValue(0)
            .setLabel("I")
            .moveTo(yawGains);
              
  yawD = cp5.addSlider("yawD")
            .setBroadcast(false)
            .setPosition(10, 50)
            .setSize(170, 20)
            .setRange(0, 100)
            .setValue(0)
            .setLabel("D")
            .moveTo(yawGains);

  yawEnabled = cp5.addToggle("yawEnabled")
                  .setBroadcast(false)
                  .setPosition(20, 110)
                  .setSize(160, 20)
                  .setValue(false)
                  .setLabel("Enabled")
                  .moveTo(yawGains);
  yawEnabled.getCaptionLabel().align(CENTER, CENTER);
              
  cp5.addButton("yawSend")
     .setPosition(20, 130)
     .setSize(160, 20)
     .setLabel("Send")
     .moveTo(yawGains);
  
  // Pitch controller
  Group pitchGains = cp5.addGroup("pitchGains")
                        .setBackgroundColor(controlBackgroundColor)
                        .setBackgroundHeight(160)
                        .setLabel("Pitch");
                      
  pitchP = cp5.addSlider("pitchP")
              .setBroadcast(false)
              .setPosition(10, 10)
              .setSize(170, 20)
              .setRange(0, 100)
              .setValue(0)
              .setLabel("P")
              .moveTo(pitchGains);
              
  pitchI = cp5.addSlider("pitchI")
              .setBroadcast(false)
              .setPosition(10, 30)
              .setSize(170, 20)
              .setRange(0, 100)
              .setValue(0)
              .setLabel("I")
              .moveTo(pitchGains);
              
  pitchD = cp5.addSlider("pitchD")
              .setBroadcast(false)
              .setPosition(10, 50)
              .setSize(170, 20)
              .setRange(0, 100)
              .setValue(0)
              .setLabel("D")
              .moveTo(pitchGains);

  pitchEnabled = cp5.addToggle("pitchEnabled")
                    .setBroadcast(false)
                    .setPosition(20, 110)
                    .setSize(160, 20)
                    .setValue(false)
                    .setLabel("Enabled")
                    .moveTo(pitchGains);
  pitchEnabled.getCaptionLabel().align(CENTER, CENTER);
              
  cp5.addButton("pitchSend")
     .setPosition(20, 130)
     .setSize(160, 20)
     .setLabel("Send")
     .moveTo(pitchGains);
     
  // Roll controller
  Group rollGains = cp5.addGroup("rollGains")
                       .setBackgroundColor(controlBackgroundColor)
                       .setBackgroundHeight(160)
                       .setLabel("Roll");
  
  rollP = cp5.addSlider("rollP")
             .setBroadcast(false)
             .setPosition(10, 10)
             .setSize(170, 20)
             .setRange(0, 100)
             .setValue(0)
             .setLabel("P")
             .moveTo(rollGains);
  
  rollI = cp5.addSlider("rollI")
             .setBroadcast(false)
             .setPosition(10, 30)
             .setSize(170, 20)
             .setRange(0, 100)
             .setValue(0)
             .setLabel("I")
             .moveTo(rollGains);
  
  rollD = cp5.addSlider("rollD")
             .setBroadcast(false)
             .setPosition(10, 50)
             .setSize(170, 20)
             .setRange(0, 100)
             .setValue(0)
             .setLabel("D")
             .moveTo(rollGains);

  rollEnabled = cp5.addToggle("rollEnabled")
                   .setBroadcast(false)
                   .setPosition(20, 110)
                   .setSize(160, 20)
                   .setValue(false)
                   .setLabel("Enabled")
                   .moveTo(rollGains);
  rollEnabled.getCaptionLabel().align(CENTER, CENTER);
  
  cp5.addButton("rollSend")
     .setPosition(20, 130)
     .setSize(160, 20)
     .setLabel("Send")
     .moveTo(rollGains);
     
  // Altitude controller
  Group depthGains = cp5.addGroup("depthGains")
                      .setBackgroundColor(controlBackgroundColor)
                      .setBackgroundHeight(160)
                      .setLabel("Depth");
  
  depthP = cp5.addSlider("depthP")
              .setBroadcast(false)
              .setPosition(10, 10)
              .setSize(170, 20)
              .setRange(0, 100)
              .setValue(0)
              .setLabel("P")
              .moveTo(depthGains);
  
  depthI = cp5.addSlider("depthI")
              .setBroadcast(false)
              .setPosition(10, 30)
              .setSize(170, 20)
              .setRange(0, 100)
              .setValue(0)
              .setLabel("I")
              .moveTo(depthGains);
  
  depthD = cp5.addSlider("depthD")
              .setBroadcast(false)
              .setPosition(10, 50)
              .setSize(170, 20)
              .setRange(0, 100)
              .setValue(0)
              .setLabel("D")
              .moveTo(depthGains);

  depthEnabled = cp5.addToggle("depthEnabled")
                    .setBroadcast(false)
                    .setPosition(20, 110)
                    .setSize(160, 20)
                    .setValue(false)
                    .setLabel("Enabled")
                    .moveTo(depthGains);
  depthEnabled.getCaptionLabel().align(CENTER, CENTER);
  
  cp5.addButton("depthSend")
     .setPosition(20, 130)
     .setSize(160, 20)
     .setLabel("Send")
     .moveTo(depthGains);
     
  // Gains accordion
  gains = cp5.addAccordion("gains")
             .setPosition(10, 160)
             .setWidth(200)
             .addItem(yawGains)
             .addItem(pitchGains)
             .addItem(rollGains)
             .addItem(depthGains);
             
  // All send button
  cp5.addButton("allSend")
     .setPosition(10, 380)
     .setSize(200, 20)
     .setLabel("Send All");

  // Stored gains fields
  cp5.addButton("saveGains")
      .setPosition(10, 450)
      .setSize(100, 20)
      .setLabel("Save Gains");

  cp5.addButton("loadGains")
      .setPosition(110, 450)
      .setSize(100, 20)
      .setLabel("Load Gains");
             
  gains.open(0);

  // Controller setpoints
  pitchRollSetpoint = cp5.addSlider2D("pitchRollSetpoint")
                         .setBroadcast(false)
                         .setPosition(230, 160)
                         .setSize(200, 200)
                         .setMinMax(-45, -45, 45, 45)
                         .setValue(0, 0)
                         .setLabel("Pitch/Roll");

  yawSetpoint = cp5.addSlider("yawSetpoint")
                   .setBroadcast(false)
                   .setPosition(230, 380)
                   .setSize(200, 20)
                   .setRange(-180, 180)
                   .setValue(0)
                   .setLabel("Yaw")
                   .setSliderMode(Slider.FLEXIBLE);

  depthSetpoint = cp5.addSlider("depthSetpoint")
                     .setBroadcast(false)
                     .setPosition(450, 160)
                     .setSize(20, 200)
                     .setRange(5, 0)
                     .setValue(0)
                     .setLabel("Depth")
                     .setSliderMode(Slider.FLEXIBLE);

  // Vehicle control buttons
  cp5.addButton("serialSelect")
     .setPosition(10, 800)
     .setSize(180, 90)
     .setLabel("Choose Serial Port")
     .getCaptionLabel().setFont(largeControlFont);

  cp5.addButton("connect")
      .setPosition(210, 800)
      .setSize(180, 90)
      .setLabel("Connect")
      .setColor(greenButtonColor)
      .getCaptionLabel().setFont(largeControlFont);

  cp5.addButton("disconnect")
      .setPosition(410, 800)
      .setSize(180, 90)
      .setLabel("Disconnect")
      .setColor(redButtonColor)
      .getCaptionLabel().setFont(largeControlFont);

  cp5.addButton("disarm")
      .setPosition(610, 800)
      .setSize(380, 90)
      .setLabel("Disarm")
      .setColor(redButtonColor)
     .getCaptionLabel().setFont(largeControlFont);

  cp5.addButton("arm")
      .setPosition(1010, 800)
      .setSize(180, 90)
      .setLabel("Arm")
      .setColor(greenButtonColor)
      .getCaptionLabel().setFont(largeControlFont);

  cp5.addButton("eepromSave")
     .setPosition(1210, 800)
     .setSize(180, 90)
     .setLabel("Save Gains to EEPROM")
     .getCaptionLabel().setFont(largeControlFont);

  cp5.addButton("eepromLoad")
      .setPosition(1410, 800)
      .setSize(180, 90)
      .setLabel("Load Gains from EEPROM")
     .getCaptionLabel().setFont(largeControlFont);

  cp5.setAutoDraw(false);

  // Add graphs
  yawGraph = new Graph(1380, 40, 200, 120, color(255, 0, 0));
  yawGraph.Title = "";
  yawGraph.xLabel = "";
  yawGraph.yLabel = "";
  yawGraph.xMax = 0;
  yawGraph.xMin = 10;
  yawGraph.yMax = 180;
  yawGraph.yMin = -180;
  yawGraph.StrokeColor = foregroundColor;
  
  pitchGraph = new Graph(1380, 235, 200, 120, color(255, 0, 0));
  pitchGraph.Title = "";
  pitchGraph.xLabel = "";
  pitchGraph.yLabel = "";
  pitchGraph.xMax = 0;
  pitchGraph.xMin = 10;
  pitchGraph.yMax = 45;
  pitchGraph.yMin = -45;
  pitchGraph.StrokeColor = foregroundColor;

  rollGraph = new Graph(1380, 430, 200, 120, color(255, 0, 0));
  rollGraph.Title = "";
  rollGraph.xLabel = "";
  rollGraph.yLabel = "";
  rollGraph.xMax = 0;
  rollGraph.xMin = 10;
  rollGraph.yMax = 45;
  rollGraph.yMin = -45;
  rollGraph.StrokeColor = foregroundColor;

  depthGraph = new Graph(1380, 625, 200, 120, color(255, 0, 0));
  depthGraph.Title = "";
  depthGraph.xLabel = "";
  depthGraph.yLabel = "";
  depthGraph.xMax = 0;
  depthGraph.xMin = 10;
  depthGraph.yMax = 0;
  depthGraph.yMin = -10;
  depthGraph.StrokeColor = foregroundColor;
}

 public void update()
{
  
}

 public void draw()
{
  update();
  
  background(backgroundColor);
  imageMode(CORNER);
  image(logo, 10, 0, 120, 120);
  
  fill(foregroundColor);
  noStroke();
  textFont(titleFont);
  textAlign(LEFT, CENTER);
  text("AUVCalStateLA", 140, 60);
  
  textFont(sectionFont);
  textAlign(CENTER, BOTTOM);
  text("Gains", 110, 150);
  text("Stored Gains", 110, 440);
  text("Setpoints", 340, 150);

  {
    textFont(itemFont);
    textAlign(CENTER, BOTTOM);
    
    text("Yaw", 60, 490);
    text("Pitch", 60, 560);
    text("Roll", 160, 490);
    text("Depth", 160, 560);

    textAlign(LEFT, BOTTOM);

    text("P:", 30, 505);
    text("I:", 30, 520);
    text("D:", 30, 535);

    text("P:", 30, 575);
    text("I:", 30, 590);
    text("D:", 30, 605);

    text("P:", 130, 505);
    text("I:", 130, 520);
    text("D:", 130, 535);

    text("P:", 130, 575);
    text("I:", 130, 590);
    text("D:", 130, 605);

    textAlign(RIGHT, BOTTOM);

    text(nf(storedYawP, 0, 2), 90, 505);
    text(nf(storedYawI, 0, 2), 90, 520);
    text(nf(storedYawD, 0, 2), 90, 535);

    text(nf(storedPitchP, 0, 2), 90, 575);
    text(nf(storedPitchI, 0, 2), 90, 590);
    text(nf(storedPitchD, 0, 2), 90, 605);

    text(nf(storedRollP, 0, 2), 190, 505);
    text(nf(storedRollI, 0, 2), 190, 520);
    text(nf(storedRollD, 0, 2), 190, 535);

    text(nf(storedDepthP, 0, 2), 190, 575);
    text(nf(storedDepthI, 0, 2), 190, 590);
    text(nf(storedDepthD, 0, 2), 190, 605);
  }

  cp5.draw();

  // Draw thruster graphic
  imageMode(CENTER);
  image(sub, 900, 460, 500, ((float)sub.height / sub.width) * 500);

  // Draw thruster bars
  fill(gaugeColor);
  noStroke();
  rect(550, 255, 50, (float)(thrustFL - 1500) / 500 * -75);
  rect(550, 460, 50, (float)(thrustML - 1500) / 500 * -75);
  rect(550, 665, 50, (float)(thrustRL - 1500) / 500 * -75);
  rect(1200, 255, 50, (float)(thrustFR - 1500) / 500 * -75);
  rect(1200, 460, 50, (float)(thrustMR - 1500) / 500 * -75);
  rect(1200, 665, 50, (float)(thrustRR - 1500) / 500 * -75);

  // Draw thruster boxes
  noFill();
  stroke(foregroundColor);
  strokeWeight(2);
  rect(550, 180, 50, 150);
  rect(550, 385, 50, 150);
  rect(550, 590, 50, 150);
  rect(1200, 180, 50, 150);
  rect(1200, 385, 50, 150);
  rect(1200, 590, 50, 150);

  strokeWeight(1);
  line(550, 255, 600, 255);
  line(550, 460, 600, 460);
  line(550, 665, 600, 665);
  line(1200, 255, 1250, 255);
  line(1200, 460, 1250, 460);
  line(1200, 665, 1250, 665);

  // Draw thruster values
  fill(foregroundColor);
  noStroke();
  textAlign(CENTER, TOP);
  textFont(itemFont);
  text(thrustFL, 575, 335);
  text(thrustML, 575, 540);
  text(thrustRL, 575, 745);
  text(thrustFR, 1225, 335);
  text(thrustMR, 1225, 540);
  text(thrustRR, 1225, 745);

  // Draw graph borders
  noStroke();
  fill(controlBackgroundColor);
  rect(1320, 0, 280, 780);
  stroke(foregroundColor);

  // Draw graph titles
  noStroke();
  fill(foregroundColor);
  textFont(sectionFont);
  textAlign(CENTER, BOTTOM);
  text("Yaw", 1460, 30);
  text("Pitch", 1460, 225);
  text("Roll", 1460, 420);
  text("Depth", 1460, 615);

  // Draw graphs
  yawGraph.DrawAxis();
  pitchGraph.DrawAxis();
  rollGraph.DrawAxis();
  depthGraph.DrawAxis();

  // Draw extra telemetry
  fill(foregroundColor);
  noStroke();
  textFont(titleFont);

  if(armed)
  {
    textAlign(CENTER, BOTTOM);
    text("ARMED", 900, 300);
  }
  else
  {
    textAlign(CENTER, TOP);
    text("SAFE", 900, 650);
  }

  // Draw serial port
  fill(foregroundColor);
  noStroke();
  textFont(sectionFont);
  textAlign(CENTER, BOTTOM);
  text("Selected: " + COMx, 100, 790);

  if(connected)
  {
    text("Connected", 300, 790);
  }
}

 public void yawSend()
{
  println("Y" + yawP.getValue() + "," + yawI.getValue() + "," + yawD.getValue());
}
 public void pitchSend()
{
  println("P" + pitchP.getValue() + "," + pitchI.getValue() + "," + pitchD.getValue());
}


 public void rollSend()
{
  println("R" + rollP.getValue() + "," + rollI.getValue() + "," + rollD.getValue());
}

 public void depthSend()
{
  println("D" + depthP.getValue() + "," + depthI.getValue() + "," + depthD.getValue());
}

 public void allSend()
{
  yawSend();
  pitchSend();
  rollSend();
  depthSend();
}

 public void saveGains()
{
  storedYawP = yawP.getValue();
  storedYawI = yawI.getValue();
  storedYawD = yawD.getValue();

  storedPitchP = pitchP.getValue();
  storedPitchI = pitchI.getValue();
  storedPitchD = pitchD.getValue();
  
  storedRollP = rollP.getValue();
  storedRollI = rollI.getValue();
  storedRollD = rollD.getValue();
  
  storedDepthP = depthP.getValue();
  storedDepthI = depthI.getValue();
  storedDepthD = depthD.getValue();
}

 public void loadGains()
{
  yawP.setValue(storedYawP);
  yawI.setValue(storedYawI);
  yawD.setValue(storedYawD);

  pitchP.setValue(storedPitchP);
  pitchI.setValue(storedPitchI);
  pitchD.setValue(storedPitchD);
  
  rollP.setValue(storedRollP);
  rollI.setValue(storedRollI);
  rollD.setValue(storedRollD);
  
  depthP.setValue(storedDepthP);
  depthI.setValue(storedDepthI);
  depthD.setValue(storedDepthD);
}

 public void arm()
{
  armed = true;
}

 public void disarm()
{
  armed = false;
}
  
/*   =================================================================================       
     The Graph class contains functions and variables that have been created to draw 
     graphs. Here is a quick list of functions within the graph class:
          
       Graph(int x, int y, int w, int h,color k)
       DrawAxis()
       Bar([])
       smoothLine([][])
       DotGraph([][])
       LineGraph([][]) 
     
     =================================================================================*/   

    
    class Graph 
    {
      
      boolean Dot=true;            // Draw dots at each data point if true
      boolean RightAxis;            // Draw the next graph using the right axis if true
      boolean ErrorFlag=false;      // If the time array isn't in ascending order, make true  
      boolean ShowMouseLines=true;  // Draw lines and give values of the mouse position
    
      int     xDiv=5,yDiv=5;            // Number of sub divisions
      int     xPos,yPos;            // location of the top left corner of the graph  
      int     Width,Height;         // Width and height of the graph
    
      int   GraphColor;
      int   BackgroundColor=color(255);  
      int   StrokeColor=color(180);     
      
      String  Title="Title";          // Default titles
      String  xLabel="x - Label";
      String  yLabel="y - Label";

      float   yMax=1024, yMin=0;      // Default axis dimensions
      float   xMax=10, xMin=0;
      float   yMaxRight=1024,yMinRight=0;
  
      PFont   Font;                   // Selected font used for text 
      
  //    int Peakcounter=0,nPeakcounter=0;
     
      Graph(int x, int y, int w, int h,int k) {  // The main declaration function
        xPos = x;
        yPos = y;
        Width = w;
        Height = h;
        GraphColor = k;
        
      }
    
     
        public void DrawAxis(){
       
   /*  =========================================================================================
        Main axes Lines, Graph Labels, Graph Background
       ==========================================================================================  */
    
        fill(BackgroundColor); color(0);stroke(StrokeColor);strokeWeight(1);
        int t=60;
        
        //rect(xPos-t*1.6,yPos-t,Width+t*2.5,Height+t*2);            // outline
        textAlign(CENTER);textSize(18);
        float c=textWidth(Title);
        fill(BackgroundColor); color(0);stroke(0);strokeWeight(1);
        rect(xPos+Width/2-c/2,yPos-35,c,0);                         // Heading Rectangle  
        
        fill(StrokeColor);
        text(Title,xPos+Width/2,yPos-37);                            // Heading Title
        textAlign(CENTER);textSize(14);
        text(xLabel,xPos+Width/2,yPos+Height+t/1.5f);                     // x-axis Label 
        
        rotate(-PI/2);                                               // rotate -90 degrees
        text(yLabel,-yPos-Height/2,xPos-t*1.6f+20);                   // y-axis Label  
        rotate(PI/2);                                                // rotate back
        
        textSize(10); noFill(); stroke(StrokeColor); smooth();strokeWeight(1);
          //Edges
          line(xPos-3,yPos+Height,xPos-3,yPos);                        // y-axis line 
          line(xPos-3,yPos+Height,xPos+Width+5,yPos+Height);           // x-axis line 
          
           stroke(red(StrokeColor) / 2, green(StrokeColor) / 2, blue(StrokeColor) / 2);
          if(yMin<0){
                    line(xPos-7,                                       // zero line 
                         yPos+Height-(abs(yMin)/(yMax-yMin))*Height,   // 
                         xPos+Width,
                         yPos+Height-(abs(yMin)/(yMax-yMin))*Height
                         );
          
                    
          }
          
          if(RightAxis){                                       // Right-axis line   
              stroke(StrokeColor);
              line(xPos+Width+3,yPos+Height,xPos+Width+3,yPos);
            }
            
           /*  =========================================================================================
                Sub-devisions for both axes, left and right
               ==========================================================================================  */
            
            stroke(StrokeColor);
            
           for(int x=0; x<=xDiv; x++){
       
            /*  =========================================================================================
                  x-axis
                ==========================================================================================  */
             
            line(PApplet.parseFloat(x)/xDiv*Width+xPos-3,yPos+Height,       //  x-axis Sub devisions    
                 PApplet.parseFloat(x)/xDiv*Width+xPos-3,yPos+Height+5);     
                 
            textSize(10);                                      // x-axis Labels
            String xAxis=str(xMin+PApplet.parseFloat(x)/xDiv*(xMax-xMin));  // the only way to get a specific number of decimals 
            String[] xAxisMS=split(xAxis,'.');                 // is to split the float into strings 
            text(xAxisMS[0]+"."+xAxisMS[1].charAt(0),          // ...
                 PApplet.parseFloat(x)/xDiv*Width+xPos-3,yPos+Height+15);   // x-axis Labels
          }
          
          
           /*  =========================================================================================
                 left y-axis
               ==========================================================================================  */
          
          for(int y=0; y<=yDiv; y++){
            line(xPos-3,PApplet.parseFloat(y)/yDiv*Height+yPos,                // ...
                  xPos-7,PApplet.parseFloat(y)/yDiv*Height+yPos);              // y-axis lines 
            
            textAlign(RIGHT);fill(StrokeColor);
            
            String yAxis=str(yMin+PApplet.parseFloat(y)/yDiv*(yMax-yMin));     // Make y Label a string
            String[] yAxisMS=split(yAxis,'.');                    // Split string
           
            text(yAxisMS[0]+"."+yAxisMS[1].charAt(0),             // ... 
                 xPos-15,PApplet.parseFloat(yDiv-y)/yDiv*Height+yPos+3);       // y-axis Labels 
                        
                        
            /*  =========================================================================================
                 right y-axis
                ==========================================================================================  */
            
            if(RightAxis){
             
              color(GraphColor); stroke(GraphColor);fill(StrokeColor);
            
              line(xPos+Width+3,PApplet.parseFloat(y)/yDiv*Height+yPos,             // ...
                   xPos+Width+7,PApplet.parseFloat(y)/yDiv*Height+yPos);            // Right Y axis sub devisions
                   
              textAlign(LEFT); 
            
              String yAxisRight=str(yMinRight+PApplet.parseFloat(y)/                // ...
                                yDiv*(yMaxRight-yMinRight));           // convert axis values into string
              String[] yAxisRightMS=split(yAxisRight,'.');             // 
           
               text(yAxisRightMS[0]+"."+yAxisRightMS[1].charAt(0),     // Right Y axis text
                    xPos+Width+15,PApplet.parseFloat(yDiv-y)/yDiv*Height+yPos+3);   // it's x,y location
            
              noFill();
            }stroke(StrokeColor);
            
          
          }
          
 
      }
      
      
   /*  =========================================================================================
       Bar graph
       ==========================================================================================  */   
      
       public void Bar(float[] a ,int from, int to) {
        
         
          stroke(GraphColor);
          fill(GraphColor);
          
          if(from<0){                                      // If the From or To value is out of bounds 
           for (int x=0; x<a.length; x++){                 // of the array, adjust them 
               rect(PApplet.parseInt(xPos+x*PApplet.parseFloat(Width)/(a.length)),
                    yPos+Height-2,
                    Width/a.length-2,
                    -a[x]/(yMax-yMin)*Height);
                 }
          }
          
          else {
          for (int x=from; x<to; x++){
            
            rect(PApplet.parseInt(xPos+(x-from)*PApplet.parseFloat(Width)/(to-from)),
                     yPos+Height-2,
                     Width/(to-from)-2,
                     -a[x]/(yMax-yMin)*Height);
                     
    
          }
          }
          
      }
   public void Bar(float[] a ) {
  
              stroke(GraphColor);
          fill(GraphColor);
    
  for (int x=0; x<a.length; x++){                 // of the array, adjust them 
               rect(PApplet.parseInt(xPos+x*PApplet.parseFloat(Width)/(a.length)),
                    yPos+Height-2,
                    Width/a.length-2,
                    -a[x]/(yMax-yMin)*Height);
                 }
          }
  
  
   /*  =========================================================================================
       Dot graph
       ==========================================================================================  */   
       
         public void DotGraph(float[] x ,float[] y) {
          
         for (int i=0; i<x.length; i++){
                    strokeWeight(2);stroke(GraphColor);noFill();smooth();
           ellipse(
                   xPos+(x[i]-x[0])/(x[x.length-1]-x[0])*Width,
                   yPos+Height-(y[i]/(yMax-yMin)*Height)+(yMin)/(yMax-yMin)*Height,
                   2,2
                   );
         }
                             
      }
      
   /*  =========================================================================================
       Streight line graph 
       ==========================================================================================  */
       
       public void LineGraph(float[] x ,float[] y) {
          
         for (int i=0; i<(x.length-1); i++){
                    strokeWeight(2);stroke(GraphColor);noFill();smooth();
           line(xPos+(x[i]-x[0])/(x[x.length-1]-x[0])*Width,
                                            yPos+Height-(y[i]/(yMax-yMin)*Height)+(yMin)/(yMax-yMin)*Height,
                                            xPos+(x[i+1]-x[0])/(x[x.length-1]-x[0])*Width,
                                            yPos+Height-(y[i+1]/(yMax-yMin)*Height)+(yMin)/(yMax-yMin)*Height);
         }
                             
      }
      
      /*  =========================================================================================
             smoothLine
          ==========================================================================================  */
    
       public void smoothLine(float[] x ,float[] y) {
         
        float tempyMax=yMax, tempyMin=yMin;
        
        if(RightAxis){yMax=yMaxRight;yMin=yMinRight;} 
         
        int counter=0;
        int xlocation=0,ylocation=0;
         
//         if(!ErrorFlag |true ){    // sort out later!
          
          beginShape(); strokeWeight(2);stroke(GraphColor);noFill();smooth();
         
            for (int i=0; i<x.length; i++){
              
           /* ===========================================================================
               Check for errors-> Make sure time array doesn't decrease (go back in time) 
              ===========================================================================*/
              if(i<x.length-1){
                if(x[i]>x[i+1]){
                   
                  ErrorFlag=true;
                
                }
              }
         
         /* =================================================================================       
             First and last bits can't be part of the curve, no points before first bit, 
             none after last bit. So a streight line is drawn instead   
            ================================================================================= */ 

              if(i==0 || i==x.length-2)line(xPos+(x[i]-x[0])/(x[x.length-1]-x[0])*Width,
                                            yPos+Height-(y[i]/(yMax-yMin)*Height)+(yMin)/(yMax-yMin)*Height,
                                            xPos+(x[i+1]-x[0])/(x[x.length-1]-x[0])*Width,
                                            yPos+Height-(y[i+1]/(yMax-yMin)*Height)+(yMin)/(yMax-yMin)*Height);
                                            
          /* =================================================================================       
              For the rest of the array a curve (spline curve) can be created making the graph 
              smooth.     
             ================================================================================= */ 
                            
              curveVertex( xPos+(x[i]-x[0])/(x[x.length-1]-x[0])*Width,
                           yPos+Height-(y[i]/(yMax-yMin)*Height)+(yMin)/(yMax-yMin)*Height);
                           
           /* =================================================================================       
              If the Dot option is true, Place a dot at each data point.  
             ================================================================================= */    
           
             if(Dot)ellipse(
                             xPos+(x[i]-x[0])/(x[x.length-1]-x[0])*Width,
                             yPos+Height-(y[i]/(yMax-yMin)*Height)+(yMin)/(yMax-yMin)*Height,
                             2,2
                             );
                             
         /* =================================================================================       
             Highlights points closest to Mouse X position   
            =================================================================================*/ 
                          
              if( abs(mouseX-(xPos+(x[i]-x[0])/(x[x.length-1]-x[0])*Width))<5 ){
                
                 
                  float yLinePosition = yPos+Height-(y[i]/(yMax-yMin)*Height)+(yMin)/(yMax-yMin)*Height;
                  float xLinePosition = xPos+(x[i]-x[0])/(x[x.length-1]-x[0])*Width;
                  strokeWeight(1);stroke(240);
                 // line(xPos,yLinePosition,xPos+Width,yLinePosition);
                  strokeWeight(2);stroke(GraphColor);
                  
                  ellipse(xLinePosition,yLinePosition,4,4);
              }
              
     
              
            }  
       
          endShape(); 
          yMax=tempyMax; yMin=tempyMin;
                float xAxisTitleWidth=textWidth(str(map(xlocation,xPos,xPos+Width,x[0],x[x.length-1])));
          
           
       if((mouseX>xPos&mouseX<(xPos+Width))&(mouseY>yPos&mouseY<(yPos+Height))){   
        if(ShowMouseLines){
              // if(mouseX<xPos)xlocation=xPos;
            if(mouseX>xPos+Width)xlocation=xPos+Width;
            else xlocation=mouseX;
            stroke(200); strokeWeight(0.5f);fill(255);color(50);
            // Rectangle and x position
            line(xlocation,yPos,xlocation,yPos+Height);
            rect(xlocation-xAxisTitleWidth/2-10,yPos+Height-16,xAxisTitleWidth+20,12);
            
            textAlign(CENTER); fill(160);
            text(map(xlocation,xPos,xPos+Width,x[0],x[x.length-1]),xlocation,yPos+Height-6);
            
           // if(mouseY<yPos)ylocation=yPos;
             if(mouseY>yPos+Height)ylocation=yPos+Height;
            else ylocation=mouseY;
          
           // Rectangle and y position
            stroke(200); strokeWeight(0.5f);fill(255);color(50);
            
            line(xPos,ylocation,xPos+Width,ylocation);
             int yAxisTitleWidth=PApplet.parseInt(textWidth(str(map(ylocation,yPos,yPos+Height,y[0],y[y.length-1]))) );
            rect(xPos-15+3,ylocation-6, -60 ,12);
            
            textAlign(RIGHT); fill(GraphColor);//StrokeColor
          //    text(map(ylocation,yPos+Height,yPos,yMin,yMax),xPos+Width+3,yPos+Height+4);
            text(map(ylocation,yPos+Height,yPos,yMin,yMax),xPos -15,ylocation+4);
           if(RightAxis){ 
                          
                           stroke(200); strokeWeight(0.5f);fill(255);color(50);
                           
                           rect(xPos+Width+15-3,ylocation-6, 60 ,12);  
                            textAlign(LEFT); fill(160);
                           text(map(ylocation,yPos+Height,yPos,yMinRight,yMaxRight),xPos+Width+15,ylocation+4);
           }
            noStroke();noFill();
         }
       }
            
   
      }

       
           public void smoothLine(float[] x ,float[] y, float[] z, float[] a ) {
           GraphColor=color(188,53,53);
            smoothLine(x ,y);
           GraphColor=color(193-100,216-100,16);
           smoothLine(z ,a);
   
       }
       
       
       
    }
    
 


  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "AUVCalStateLAGUI" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
